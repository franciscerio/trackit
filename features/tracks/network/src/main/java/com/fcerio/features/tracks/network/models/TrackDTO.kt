package com.fcerio.features.tracks.network.models

import com.fcerio.features.tracks.domain.Track
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

@Serializable
data class TrackDTO(
    @SerialName("artist_id") val artistId: Int? = null,
    @SerialName("artist_name") val artistName: String? = null,
    @SerialName("artist_view_url") val artistViewUrl: String? = null,
    @SerialName("artwork100") val artwork100: ArtworkDTO? = null,
    @SerialName("artwork30") val artwork30: ArtworkDTO? = null,
    @SerialName("artwork60") val artwork60: ArtworkDTO? = null,
    @SerialName("artwork_url100") val artworkUrl100: String? = null,
    @SerialName("artwork_url30") val artworkUrl30: String? = null,
    @SerialName("artwork_url60") val artworkUrl60: String? = null,
    @SerialName("artwork_url600") val artworkUrl600: String? = null,
    @SerialName("collection_artist_id") val collectionArtistId: Int? = null,
    @SerialName("collection_artist_view_url") val collectionArtistViewUrl: String? = null,
    @SerialName("collection_censored_name") val collectionCensoredName: String? = null,
    @SerialName("collection_explicitness") val collectionExplicitness: String? = null,
    @SerialName("collection_hd_price") val collectionHdPrice: Double? = null,
    @SerialName("collection_id") val collectionId: Int? = null,
    @SerialName("collection_name") val collectionName: String? = null,
    @SerialName("collection_price") val collectionPrice: Double? = null,
    @SerialName("collection_view_url") val collectionViewUrl: String? = null,
    @SerialName("content_advisory_rating") val contentAdvisoryRating: String? = null,
    @SerialName("country") val country: String? = null,
    @SerialName("created_at") val createdAt: String? = null,
    @SerialName("currency") val currency: String? = null,
    @SerialName("disc_count") val discCount: Int? = null,
    @SerialName("disc_number") val discNumber: Int? = null,
    @SerialName("feed_url") val feedUrl: String? = null,
    @SerialName("genre_ids") val genreIds: List<String>? = null,
    @SerialName("genres") val genres: List<String>? = null,
    @SerialName("is_favorite") val isFavorite: Boolean? = null,
    @SerialName("is_streamable") val isStreamable: Boolean? = null,
    @SerialName("kind") val kind: String? = null,
    @SerialName("long_description") val longDescription: String? = null,
    @SerialName("preview") val preview: PreviewDTO? = null,
    @SerialName("preview_url") val previewUrl: String? = null,
    @SerialName("preview_video") val previewVideo: PreviewDTO? = null,
    @SerialName("primary_genre_name") val primaryGenreName: String? = null,
    @SerialName("release_date") val releaseDate: String? = null,
    @SerialName("short_description") val shortDescription: String? = null,
    @SerialName("track_censored_name") val trackCensoredName: String? = null,
    @SerialName("track_count") val trackCount: Int? = null,
    @SerialName("track_explicitness") val trackExplicitness: String? = null,
    @SerialName("track_hd_price") val trackHdPrice: Double? = null,
    @SerialName("track_hd_rental_price") val trackHdRentalPrice: Double? = null,
    @SerialName("track_id") val trackId: Long? = null,
    @SerialName("track_name") val trackName: String? = null,
    @SerialName("track_number") val trackNumber: Int? = null,
    @SerialName("track_price") val trackPrice: Double? = null,
    @SerialName("track_rental_price") val trackRentalPrice: Double? = null,
    @SerialName("track_time_millis") val trackTimeMillis: Int? = null,
    @SerialName("track_view_url") val trackViewUrl: String? = null,
    @SerialName("updated_at") val updatedAt: String? = null,
    @SerialName("wrapper_type") val wrapperType: String? = null
)

internal fun TrackDTO.toDomain(): Track {
    return Track(
        artistId = artistId ?: 0,
        artistName = artistName.orEmpty(),
        artistViewUrl = artistViewUrl.orEmpty(),
        artwork100 = artwork100.toDomain(),
        artwork30 = artwork30.toDomain(),
        artwork60 = artwork60.toDomain(),
        artworkUrl100 = artworkUrl100.orEmpty(),
        artworkUrl30 = artworkUrl30.orEmpty(),
        artworkUrl60 = artworkUrl60.orEmpty(),
        artworkUrl600 = artworkUrl600.orEmpty(),
        collectionArtistId = collectionArtistId ?: 0,
        collectionArtistViewUrl = collectionArtistViewUrl.orEmpty(),
        collectionCensoredName = collectionCensoredName.orEmpty(),
        collectionExplicitness = collectionExplicitness.orEmpty(),
        collectionHdPrice = collectionHdPrice ?: 0.0,
        collectionId = collectionId ?: 0,
        collectionName = collectionName.orEmpty(),
        collectionPrice = collectionPrice ?: 0.0,
        collectionViewUrl = collectionViewUrl.orEmpty(),
        contentAdvisoryRating = contentAdvisoryRating.orEmpty(),
        country = country.orEmpty(),
        createdAt = createdAt.orEmpty(),
        currency = currency.orEmpty(),
        discCount = discCount ?: 0,
        discNumber = discNumber ?: 0,
        feedUrl = feedUrl.orEmpty(),
        genreIds = genreIds.orEmpty(),
        isFavorite = isFavorite ?: false,
        isStreamable = isStreamable ?: false,
        kind = kind.orEmpty(),
        longDescription = longDescription.orEmpty(),
        preview = preview.toDomain(),
        previewUrl = previewUrl.orEmpty(),
        previewVideo = previewVideo.toDomain(),
        primaryGenreName = primaryGenreName.orEmpty(),
        releaseDate = releaseDate.orEmpty(),
        shortDescription = shortDescription.orEmpty(),
        trackCensoredName = trackCensoredName.orEmpty(),
        trackCount = trackCount ?: 0,
        trackExplicitness = trackExplicitness.orEmpty(),
        trackHdPrice = trackHdPrice ?: 0.0,
        trackHdRentalPrice = trackHdRentalPrice ?: 0.0,
        trackId = trackId ?: 0L,
        trackName = trackName.orEmpty(),
        trackNumber = trackNumber ?: 0,
        trackPrice = trackPrice ?: 0.0,
        trackRentalPrice = trackRentalPrice ?: 0.0,
        trackTimeMillis = trackTimeMillis ?: 0,
        trackViewUrl = trackViewUrl.orEmpty(),
        updatedAt = updatedAt.orEmpty(),
        wrapperType = wrapperType.orEmpty(),
        genres = genres.orEmpty()
    )
}
